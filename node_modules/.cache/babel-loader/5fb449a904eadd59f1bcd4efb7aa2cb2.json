{"ast":null,"code":"var _jsxFileName = \"/home/titi/unifork/OrangeSwap/src/pages/Pool/index.tsx\";\nimport React, { useContext, useMemo } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\nimport { JSBI } from '@uniswap/sdk';\nimport { Link } from 'react-router-dom';\nimport { SwapPoolTabs } from '../../components/NavigationTabs';\nimport FullPositionCard from '../../components/PositionCard';\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/wallet/hooks';\nimport { TYPE, HideSmall } from '../../theme'; // { ExternalLink }\n\nimport { Text } from 'rebass';\nimport Card from '../../components/Card';\nimport { RowBetween, RowFixed } from '../../components/Row';\nimport { ButtonPrimary } from '../../components/Button'; // { ButtonSecondary }\n\nimport { AutoColumn } from '../../components/Column';\nimport { useActiveWeb3React } from '../../hooks';\nimport { usePairs } from '../../data/Reserves';\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../../state/user/hooks';\nimport { Dots } from '../../components/swap/styleds';\nimport { CardSection, DataCard } from '../../components/earn/styled';\nimport { useStakingInfo } from '../../state/stake/hooks';\nimport { BIG_INT_ZERO } from '../../constants';\nconst PageWrapper = styled(AutoColumn)`\n  max-width: 640px;\n  width: 100%;\n`;\nconst VoteCard = styled(DataCard)`\n  overflow: hidden;\n  border: none;\n  border-radius: 12px;\n  background-color: ${({\n  theme\n}) => theme.bg1};\n  background: linear-gradient(to bottom, #d85252 2%, ${({\n  theme\n}) => theme.bg1} 2%);\n`;\nconst TitleRow = styled(RowBetween)`\n  ${({\n  theme\n}) => theme.mediaWidth.upToSmall`\n    flex-wrap: wrap;\n    gap: 12px;\n    width: 100%;\n    flex-direction: column-reverse;\n  `};\n`;\nconst ButtonRow = styled(RowFixed)`\n  gap: 6px;\n  ${({\n  theme\n}) => theme.mediaWidth.upToSmall`\n    width: 100%;\n    flex-direction: row-reverse;\n    justify-content: space-between;\n  `};\n`;\nconst ResponsiveButtonPrimary = styled(ButtonPrimary)`\n  width: fit-content;\n\n  ${({\n  theme\n}) => theme.mediaWidth.upToSmall`\n    width: 48%;\n  `};\n`;\nconst EmptyProposals = styled.div`\n  border: 1px solid ${({\n  theme\n}) => theme.text4};\n  padding: 16px 12px;\n  border-radius: 12px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\nexport default function Pool() {\n  const theme = useContext(ThemeContext);\n  const {\n    account\n  } = useActiveWeb3React(); // fetch the user's balances of all tracked V2 LP tokens\n\n  const trackedTokenPairs = useTrackedTokenPairs();\n  const tokenPairsWithLiquidityTokens = useMemo(() => trackedTokenPairs.map(tokens => ({\n    liquidityToken: toV2LiquidityToken(tokens),\n    tokens\n  })), [trackedTokenPairs]);\n  const liquidityTokens = useMemo(() => tokenPairsWithLiquidityTokens.map(tpwlt => tpwlt.liquidityToken), [tokenPairsWithLiquidityTokens]);\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(account !== null && account !== void 0 ? account : undefined, liquidityTokens); // fetch the reserves for all V2 pools in which the user has a balance\n\n  const liquidityTokensWithBalances = useMemo(() => tokenPairsWithLiquidityTokens.filter(({\n    liquidityToken\n  }) => {\n    var _v2PairsBalances$liqu;\n\n    return (_v2PairsBalances$liqu = v2PairsBalances[liquidityToken.address]) === null || _v2PairsBalances$liqu === void 0 ? void 0 : _v2PairsBalances$liqu.greaterThan('0');\n  }), [tokenPairsWithLiquidityTokens, v2PairsBalances]);\n  const v2Pairs = usePairs(liquidityTokensWithBalances.map(({\n    tokens\n  }) => tokens));\n  const v2IsLoading = fetchingV2PairBalances || (v2Pairs === null || v2Pairs === void 0 ? void 0 : v2Pairs.length) < liquidityTokensWithBalances.length || (v2Pairs === null || v2Pairs === void 0 ? void 0 : v2Pairs.some(V2Pair => !V2Pair));\n  const allV2PairsWithLiquidity = v2Pairs.map(([, pair]) => pair).filter(v2Pair => Boolean(v2Pair)); // show liquidity even if its deposited in rewards contract\n\n  const stakingInfo = useStakingInfo();\n  const stakingInfosWithBalance = stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.filter(pool => JSBI.greaterThan(pool.stakedAmount.raw, BIG_INT_ZERO));\n  const stakingPairs = usePairs(stakingInfosWithBalance === null || stakingInfosWithBalance === void 0 ? void 0 : stakingInfosWithBalance.map(stakingInfo => stakingInfo.tokens)); // remove any pairs that also are included in pairs with stake in mining pool\n\n  const v2PairsWithoutStakedAmount = allV2PairsWithLiquidity.filter(v2Pair => {\n    return (stakingPairs === null || stakingPairs === void 0 ? void 0 : stakingPairs.map(stakingPair => stakingPair[1]).filter(stakingPair => (stakingPair === null || stakingPair === void 0 ? void 0 : stakingPair.liquidityToken.address) === v2Pair.liquidityToken.address).length) === 0;\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PageWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SwapPoolTabs, {\n    active: 'pool',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(VoteCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.largeHeader, {\n    fontWeight: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  }, \"Liquidity provider rewards\")), /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }, `Liquidity providers earn a 0.25% fee on all trades proportional to their share of the pool. Fees are added to the pool, accrue in real time and can be claimed by withdrawing your liquidity.`))))), /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"lg\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"lg\",\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TitleRow, {\n    style: {\n      marginTop: '1rem'\n    },\n    padding: '0',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(HideSmall, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.mediumHeader, {\n    style: {\n      marginTop: '0.5rem',\n      justifySelf: 'flex-start'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }, \"Your liquidity\")), /*#__PURE__*/React.createElement(ButtonRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ResponsiveButtonPrimary, {\n    as: Link,\n    padding: \"10px 18px\",\n    to: \"/create/ETH\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }, \"Create a pair\"), /*#__PURE__*/React.createElement(ResponsiveButtonPrimary, {\n    id: \"join-pool-button\",\n    as: Link,\n    padding: \"10px 18px\",\n    to: \"/add/ETH\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontWeight: 500,\n    fontSize: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 19\n    }\n  }, \"Add Liquidity\")))), !account ? /*#__PURE__*/React.createElement(Card, {\n    padding: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.body, {\n    color: theme.text3,\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }\n  }, \"Connect to a wallet to view your liquidity.\")) : v2IsLoading ? /*#__PURE__*/React.createElement(EmptyProposals, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.body, {\n    color: theme.text3,\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Dots, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 19\n    }\n  }, \"Loading\"))) : (allV2PairsWithLiquidity === null || allV2PairsWithLiquidity === void 0 ? void 0 : allV2PairsWithLiquidity.length) > 0 || (stakingPairs === null || stakingPairs === void 0 ? void 0 : stakingPairs.length) > 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, v2PairsWithoutStakedAmount.map(v2Pair => /*#__PURE__*/React.createElement(FullPositionCard, {\n    key: v2Pair.liquidityToken.address,\n    pair: v2Pair,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 19\n    }\n  })), stakingPairs.map((stakingPair, i) => stakingPair[1] &&\n  /*#__PURE__*/\n  // skip pairs that arent loaded\n  React.createElement(FullPositionCard, {\n    key: stakingInfosWithBalance[i].stakingRewardAddress,\n    pair: stakingPair[1],\n    stakedBalance: stakingInfosWithBalance[i].stakedAmount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 23\n    }\n  }))) : /*#__PURE__*/React.createElement(EmptyProposals, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.body, {\n    color: theme.text3,\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 17\n    }\n  }, \"No liquidity found.\"))))));\n}","map":{"version":3,"sources":["/home/titi/unifork/OrangeSwap/src/pages/Pool/index.tsx"],"names":["React","useContext","useMemo","styled","ThemeContext","JSBI","Link","SwapPoolTabs","FullPositionCard","useTokenBalancesWithLoadingIndicator","TYPE","HideSmall","Text","Card","RowBetween","RowFixed","ButtonPrimary","AutoColumn","useActiveWeb3React","usePairs","toV2LiquidityToken","useTrackedTokenPairs","Dots","CardSection","DataCard","useStakingInfo","BIG_INT_ZERO","PageWrapper","VoteCard","theme","bg1","TitleRow","mediaWidth","upToSmall","ButtonRow","ResponsiveButtonPrimary","EmptyProposals","div","text4","Pool","account","trackedTokenPairs","tokenPairsWithLiquidityTokens","map","tokens","liquidityToken","liquidityTokens","tpwlt","v2PairsBalances","fetchingV2PairBalances","undefined","liquidityTokensWithBalances","filter","address","greaterThan","v2Pairs","v2IsLoading","length","some","V2Pair","allV2PairsWithLiquidity","pair","v2Pair","Boolean","stakingInfo","stakingInfosWithBalance","pool","stakedAmount","raw","stakingPairs","v2PairsWithoutStakedAmount","stakingPair","width","marginTop","justifySelf","text3","i","stakingRewardAddress"],"mappings":"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","sourcesContent":["import React, { useContext, useMemo } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\nimport { Pair, JSBI } from '@uniswap/sdk'\nimport { Link } from 'react-router-dom'\nimport { SwapPoolTabs } from '../../components/NavigationTabs'\n\nimport FullPositionCard from '../../components/PositionCard'\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/wallet/hooks'\nimport { TYPE, HideSmall } from '../../theme' // { ExternalLink }\nimport { Text } from 'rebass'\nimport Card from '../../components/Card'\nimport { RowBetween, RowFixed } from '../../components/Row'\nimport { ButtonPrimary } from '../../components/Button' // { ButtonSecondary }\nimport { AutoColumn } from '../../components/Column'\nimport { useActiveWeb3React } from '../../hooks'\nimport { usePairs } from '../../data/Reserves'\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../../state/user/hooks'\nimport { Dots } from '../../components/swap/styleds'\nimport { CardSection, DataCard } from '../../components/earn/styled'\nimport { useStakingInfo } from '../../state/stake/hooks'\nimport { BIG_INT_ZERO } from '../../constants'\n\nconst PageWrapper = styled(AutoColumn)`\n  max-width: 640px;\n  width: 100%;\n`\n\nconst VoteCard = styled(DataCard)`\n  overflow: hidden;\n  border: none;\n  border-radius: 12px;\n  background-color: ${({ theme }) => theme.bg1};\n  background: linear-gradient(to bottom, #d85252 2%, ${({ theme }) => theme.bg1} 2%);\n`\n\nconst TitleRow = styled(RowBetween)`\n  ${({ theme }) => theme.mediaWidth.upToSmall`\n    flex-wrap: wrap;\n    gap: 12px;\n    width: 100%;\n    flex-direction: column-reverse;\n  `};\n`\n\nconst ButtonRow = styled(RowFixed)`\n  gap: 6px;\n  ${({ theme }) => theme.mediaWidth.upToSmall`\n    width: 100%;\n    flex-direction: row-reverse;\n    justify-content: space-between;\n  `};\n`\n\nconst ResponsiveButtonPrimary = styled(ButtonPrimary)`\n  width: fit-content;\n\n  ${({ theme }) => theme.mediaWidth.upToSmall`\n    width: 48%;\n  `};\n`\n\nconst EmptyProposals = styled.div`\n  border: 1px solid ${({ theme }) => theme.text4};\n  padding: 16px 12px;\n  border-radius: 12px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`\n\nexport default function Pool() {\n  const theme = useContext(ThemeContext)\n  const { account } = useActiveWeb3React()\n\n  // fetch the user's balances of all tracked V2 LP tokens\n  const trackedTokenPairs = useTrackedTokenPairs()\n  const tokenPairsWithLiquidityTokens = useMemo(\n    () => trackedTokenPairs.map(tokens => ({ liquidityToken: toV2LiquidityToken(tokens), tokens })),\n    [trackedTokenPairs]\n  )\n  const liquidityTokens = useMemo(() => tokenPairsWithLiquidityTokens.map(tpwlt => tpwlt.liquidityToken), [\n    tokenPairsWithLiquidityTokens\n  ])\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(\n    account ?? undefined,\n    liquidityTokens\n  )\n\n  // fetch the reserves for all V2 pools in which the user has a balance\n  const liquidityTokensWithBalances = useMemo(\n    () =>\n      tokenPairsWithLiquidityTokens.filter(({ liquidityToken }) =>\n        v2PairsBalances[liquidityToken.address]?.greaterThan('0')\n      ),\n    [tokenPairsWithLiquidityTokens, v2PairsBalances]\n  )\n\n  const v2Pairs = usePairs(liquidityTokensWithBalances.map(({ tokens }) => tokens))\n  const v2IsLoading =\n    fetchingV2PairBalances || v2Pairs?.length < liquidityTokensWithBalances.length || v2Pairs?.some(V2Pair => !V2Pair)\n\n  const allV2PairsWithLiquidity = v2Pairs.map(([, pair]) => pair).filter((v2Pair): v2Pair is Pair => Boolean(v2Pair))\n\n  // show liquidity even if its deposited in rewards contract\n  const stakingInfo = useStakingInfo()\n  const stakingInfosWithBalance = stakingInfo?.filter(pool => JSBI.greaterThan(pool.stakedAmount.raw, BIG_INT_ZERO))\n  const stakingPairs = usePairs(stakingInfosWithBalance?.map(stakingInfo => stakingInfo.tokens))\n\n  // remove any pairs that also are included in pairs with stake in mining pool\n  const v2PairsWithoutStakedAmount = allV2PairsWithLiquidity.filter(v2Pair => {\n    return (\n      stakingPairs\n        ?.map(stakingPair => stakingPair[1])\n        .filter(stakingPair => stakingPair?.liquidityToken.address === v2Pair.liquidityToken.address).length === 0\n    )\n  })\n\n  return (\n    <>\n      <PageWrapper>\n        <SwapPoolTabs active={'pool'} />\n        <VoteCard>\n          <CardSection>\n            <AutoColumn gap=\"md\">\n              <RowBetween>\n                <TYPE.largeHeader fontWeight={600}>Liquidity provider rewards</TYPE.largeHeader>\n              </RowBetween>\n              <RowBetween>\n                <TYPE.body>\n                  {`Liquidity providers earn a 0.25% fee on all trades proportional to their share of the pool. Fees are added to the pool, accrue in real time and can be claimed by withdrawing your liquidity.`}\n                </TYPE.body>\n              </RowBetween>\n            </AutoColumn>\n          </CardSection>\n        </VoteCard>\n\n        <AutoColumn gap=\"lg\" justify=\"center\">\n          <AutoColumn gap=\"lg\" style={{ width: '100%' }}>\n            <TitleRow style={{ marginTop: '1rem' }} padding={'0'}>\n              <HideSmall>\n                <TYPE.mediumHeader style={{ marginTop: '0.5rem', justifySelf: 'flex-start' }}>\n                  Your liquidity\n                </TYPE.mediumHeader>\n              </HideSmall>\n              <ButtonRow>\n                <ResponsiveButtonPrimary as={Link} padding=\"10px 18px\" to=\"/create/ETH\">\n                  Create a pair\n                </ResponsiveButtonPrimary>\n                <ResponsiveButtonPrimary id=\"join-pool-button\" as={Link} padding=\"10px 18px\" to=\"/add/ETH\">\n                  <Text fontWeight={500} fontSize={16}>\n                    Add Liquidity\n                  </Text>\n                </ResponsiveButtonPrimary>\n              </ButtonRow>\n            </TitleRow>\n\n            {!account ? (\n              <Card padding=\"40px\">\n                <TYPE.body color={theme.text3} textAlign=\"center\">\n                  Connect to a wallet to view your liquidity.\n                </TYPE.body>\n              </Card>\n            ) : v2IsLoading ? (\n              <EmptyProposals>\n                <TYPE.body color={theme.text3} textAlign=\"center\">\n                  <Dots>Loading</Dots>\n                </TYPE.body>\n              </EmptyProposals>\n            ) : allV2PairsWithLiquidity?.length > 0 || stakingPairs?.length > 0 ? (\n              <>\n                {/* <ButtonSecondary>\n                  <RowBetween>\n                    <ExternalLink href={'https://info.snakeswap.org/#/account/' + account}>\n                      Account analytics and accrued fees\n                    </ExternalLink>\n                    <span> ↗</span>\n                  </RowBetween>\n                </ButtonSecondary> */}\n                {v2PairsWithoutStakedAmount.map(v2Pair => (\n                  <FullPositionCard key={v2Pair.liquidityToken.address} pair={v2Pair} />\n                ))}\n                {stakingPairs.map(\n                  (stakingPair, i) =>\n                    stakingPair[1] && ( // skip pairs that arent loaded\n                      <FullPositionCard\n                        key={stakingInfosWithBalance[i].stakingRewardAddress}\n                        pair={stakingPair[1]}\n                        stakedBalance={stakingInfosWithBalance[i].stakedAmount}\n                      />\n                    )\n                )}\n              </>\n            ) : (\n              <EmptyProposals>\n                <TYPE.body color={theme.text3} textAlign=\"center\">\n                  No liquidity found.\n                </TYPE.body>\n              </EmptyProposals>\n            )}\n          </AutoColumn>\n        </AutoColumn>\n      </PageWrapper>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}